<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>effective python 2. 리스트와 딕셔너리 - Series - 일편단씸의 블로그</title><link>https://mechurak.github.io/series/effective-python-2.-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC/</link><description>effective python 2. 리스트와 딕셔너리 - Series - 일편단씸의 블로그</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 11 Dec 2020 01:01:00 +0900</lastBuildDate><atom:link href="https://mechurak.github.io/series/effective-python-2.-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC/" rel="self" type="application/rss+xml"/><item><title>'Better Way 18. __missing__을 사용해 키에 따라 다른 디폴트 값을 생성하는 방법을 알아두라' 정리</title><link>https://mechurak.github.io/2020-12-11_dict-missing/</link><pubDate>Fri, 11 Dec 2020 01:01:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-11_dict-missing/</guid><description>dict 을 확장하고 __missing__을 구현하면, key에 따라 다른 디폴트 값을 돌려 주게 할 수 있습니다.</description></item><item><title>'Better way 17. 내부 상태에서 원소가 없는 경우를 처리할 때는 setdefault보다 defaultdict를 사용하라' 정리</title><link>https://mechurak.github.io/2020-12-11_default-dict/</link><pubDate>Fri, 11 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-11_default-dict/</guid><description>defaultdict 을 사용하면, 키가 없는 경우를 편리하게 처리할 수 있습니다.</description></item><item><title>'Better way 16. in을 사용하고 딕셔너리 키가 없을 때 KeyError를 처리하기보다는 get을 사용하라' 정리</title><link>https://mechurak.github.io/2020-12-10_get-for-missing-key/</link><pubDate>Thu, 10 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-10_get-for-missing-key/</guid><description>딕셔너리 키가 없을 때 처리는 get을 사용하는 게 좋습니다.</description></item><item><title>'Better way 15. 딕셔너리 삽입 순서에 의존할 때는 조심하라' 정리</title><link>https://mechurak.github.io/2020-12-09_dict-insertion-order/</link><pubDate>Wed, 09 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-09_dict-insertion-order/</guid><description>파이썬 3.7부터는 딕셔너리에 추가한 순서대로 순회가 됩니다. 이전 버전의 파이썬도 고려해야 한다면 collections.OrderedDict을 사용해야 합니다.</description></item><item><title>'Better way 14. 복잡한 기준을 사용해 정렬할 때는 key 파라미터를 사용하라' 정리</title><link>https://mechurak.github.io/2020-12-08_key-parameter/</link><pubDate>Tue, 08 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-08_key-parameter/</guid><description>객체 리스트를 커스텀하게 정렬해야 한다면, 정렬 기준이 될 값을 리턴하는 함수를 key 파라미터로 넘기면 됩니다.</description></item><item><title>'Better way 13. 슬라이싱보다는 나머지를 모두 잡아내는 언패킹을 사용하라' 정리</title><link>https://mechurak.github.io/2020-12-07_catch-all-unpacking/</link><pubDate>Mon, 07 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-07_catch-all-unpacking/</guid><description>리스트를 언패킹할때, 나머지 부분은 별표식(starred expression) 으로 잡아낼 수 있습니다.</description></item><item><title>'Better way 12. 스타라이드와 슬라이스를 한 식에 함께 사용하지 말라' 정리</title><link>https://mechurak.github.io/2020-12-06_stride-and-slice/</link><pubDate>Sun, 06 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-06_stride-and-slice/</guid><description>슬라이싱과 인덱싱을 같이 쓰면 너무 복잡해져서 이해하기 어렵습니다. 나눠서 씁시다.</description></item><item><title>'Better way 11. 시퀀스를 슬라이싱하는 방법을 익혀라' 정리</title><link>https://mechurak.github.io/2020-12-05_slice-sequence/</link><pubDate>Sat, 05 Dec 2020 01:00:00 +0900</pubDate><author><name>일편단씸</name></author><guid>https://mechurak.github.io/2020-12-05_slice-sequence/</guid><description>슬라이싱은 정말 많이 쓰이고 유용한 기능입니다. list, tuple, str에 사용 가능합니다.</description></item></channel></rss>